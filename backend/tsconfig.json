{
  "compilerOptions": {
    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript */
    "module": "commonjs",                                 /* Specify the module code generation */
    "esModuleInterop": true,                              /* Ensure compatibility with CommonJS modules */
    "forceConsistentCasingInFileNames": true,             /* Ensure that casing is correct in imports */

    /* Emit */
    "declaration": true,                                  /* Generate .d.ts files from TypeScript */
    "sourceMap": true,                                    /* Create source map files for emitted JavaScript files */
    "outDir": "./dist",                                   /* Specify output folder for all emitted files */
    "removeComments": true,                               /* Disable emitting comments in the output files */
    "noEmitOnError": true,                                /* Disable emitting files if any type-checking errors occur */
    
    /* Type Checking */
    "strict": true,                                       /* Enable all strict type-checking options */
    "skipLibCheck": true,                                 /* Skip type checking of declaration files (.d.ts) */
    
    /* Module Resolution */
    "moduleResolution": "node",                           /* Specifies module resolution strategy (node module resolution) */
    "resolveJsonModule": true,                            /* Enable importing .json files as modules */
    "baseUrl": "./",                                      /* Base directory to resolve non-relative module names */
    
    /* Interop Constraints */
    "allowSyntheticDefaultImports": true,                 /* Allow importing CommonJS modules as if they have a default export */

    /* Additional Settings */
    "strictNullChecks": true,                             /* Enable strict null checks */
    "noImplicitAny": true,                                /* Raise an error when a variable is implicitly of type 'any' */
    "noUnusedLocals": true,                               /* Report unused local variables */
    "noUnusedParameters": true,                           /* Report unused function parameters */
    "noImplicitThis": true,                               /* Report 'this' of type 'any' */
    "useUnknownInCatchVariables": true                    /* Default catch clause variables to 'unknown' instead of 'any' */
  },
  "include": [
    "src/**/*"                                            /* Include all TypeScript files from the src directory */
  ],
  "exclude": [
    "node_modules"                                        /* Exclude the node_modules directory */
  ]
}
